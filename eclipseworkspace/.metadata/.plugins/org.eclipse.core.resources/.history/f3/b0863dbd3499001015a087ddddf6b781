/* 
 * Kuda includes a library and editor for authoring interactive 3D content for the web.
 * Copyright (C) 2011 SRI International.
 *
 * This program is free software; you can redistribute it and/or modify it under the terms
 * of the GNU General Public License as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program; 
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, 
 * Boston, MA 02110-1301 USA.
 */

/**
 * This is a simple hello world, showing how to set up a simple world, 
 *		load a model, and set the camera to a viewpoint once the model
 *		has loaded.
 */
	
	o3djs.require('hemi.core');
	o3djs.require('o3djs.util');


	var unit10 = unit10 || {};
	var unitTest10 = unitTest10 || {};

	
	unit10.start = function(onUnitCompleteCallback) {
		unit10.onUnitCompleteCallback = onUnitCompleteCallback;
		unitTest10.callBack = unit10.step_2;
		
		var desc = 'Tests the ability to play an animation both forward and backwards';
		jqUnit.module('UNIT 10', desc); 

		jqUnit.test("Load Model", unitTest10.init);
		jqUnit.stop();
	};
	
	
	unit10.step_2 = function() {
		jqUnit.start();
		hemi.view.addRenderListener(unitTest10);
		unitTest10.callBack = unit10.step_3;
		jqUnit.test("Create two GpuParticleSystems", unitTest10.start);
		jqUnit.stop();
	};
	
	unit10.step_3 = function() {
		jqUnit.start();
		unitTest10.callBack = unit10.step_4;
		jqUnit.test("Show Boxes", unitTest10.showBoxes);
		jqUnit.stop();
	};
	
	unit10.step_4 = function() {
		jqUnit.start();
		unitTest10.callBack = unit10.step_5;
		jqUnit.test("Hide Boxes", unitTest10.hideBoxes);
		jqUnit.stop();
	};
	
	unit10.step_5 = function() {
		jqUnit.start();
		unitTest10.callBack = unit10.step_6;
		jqUnit.test("Show Boxes", unitTest10.showBoxes);
		jqUnit.stop();
	};
	
	unit10.step_6 = function() {
		jqUnit.start();
		unitTest10.callBack = unit10.end;
		jqUnit.test("Show Performance", unitTest10.showPerformance);
		jqUnit.stop();
	};
	
	unit10.end = function() {
		jqUnit.start();
		hemi.view.removeRenderListener(unitTest10);
		unit10.onUnitCompleteCallback.call();
	};
	
	unit10.cleanup = function() {
		unitTest10.model.cleanup();
		unitTest10.particleSystem.stop();
		unitTest10.particleSystem2.stop();
	};
	

	unitTest10.init = function()   {
		jqUnit.expect(1);
		
		unitTest10.model = new hemi.model.Model();				// Create a new Model
		jqMock.assertThat(unitTest10.model , is.instanceOf(hemi.model.Model));
		
		unitTest10.model.setFileName('damper/damper.json'); // Set the model file
		
		var subscription = unitTest10.model.subscribe (
			hemi.msg.load,
			function() {
				unitTest10.model.unsubscribe(subscription, hemi.msg.load);
				unitTest10.callBack.call();
			}
		);
		
		hemi.world.ready();   // Indicate that we are ready to start our script
	};
	
	unitTest10.start = function() {

		jqMock.assertThat(unitTest10.model , is.instanceOf(hemi.model.Model));
		hemi.world.camera.enableControl();	// Enable camera mouse control

		var vp = new hemi.view.Viewpoint();		// Create a new Viewpoint
		vp.eye = [-10,800,1800];					// Set viewpoint eye
		vp.target = [10,250,30];					// Set viewpoint target
		
		hemi.world.camera.moveToView(vp,30);

	};
	
	unitTest10.showBoxes = function(){
		unitTest10.particleSystem1.showBoxes();
		unitTest10.particleSystem2.showBoxes();
		
		jqMock.assertThat(unitTest10.model , is.instanceOf(hemi.model.Model));
	};
	
	unitTest10.hideBoxes = function() {
		unitTest10.particleSystem1.hideBoxes();
		unitTest10.particleSystem2.hideBoxes();
	};
	
	unitTest10.showPerformance = function() {
		var endMs = new Date().getTime();
		
		unitTest10.elapsedMs = endMs - unitTest10.startMs;
		jqUnit.ok((unitTest10.particleSystem1.frames  > 0), 'Number of frames in the particle system: ' + unitTest10.particleSystem1.frames);
		
		
		unitTest10.fps = unitTest10.particleSystem1.frames / (unitTest10.elapsedMs  / 1000);
		
		jqUnit.ok(unitTest10.elapsedMs > 0, 'Elapsed Time in Ms: ' + unitTest10.elapsedMs);
		jqUnit.ok(unitTest10.fps > 0, 'AVG Frames per Second: ' + unitTest10.fps);
	};
	
	
	unitTest10.onRender = function(event) {
		
		unitTest10.totalFramesRendered++;
		var mod = unitTest10.totalFramesRendered % unitTest10.callbackAfterFrames;
		
		if (0 == mod) {
			unitTest10.callBack.call();
		} 
	};

	



	
	

