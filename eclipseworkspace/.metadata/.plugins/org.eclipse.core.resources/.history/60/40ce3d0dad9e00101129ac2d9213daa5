
o3djs.base.o3d = o3d;
o3djs.require('lgb.Base');
o3djs.require('lgb.controller.ControllerBase');

o3djs.require('lgb.utils');
o3djs.require('lgb.loader');
o3djs.require('lgb.animation');
o3djs.require('lgb.progressBar');

o3djs.require('lgb.controller.AdminController');
o3djs.require('lgb.controller.component.RadioButtonGroupController');
o3djs.require('lgb.controller.EnvelopeController');
o3djs.require('lgb.controller.ModeController');
o3djs.require('lgb.controller.ZoneController');
o3djs.require('lgb.controller.LeftNavController');
o3djs.require('lgb.controller.GuiController');

o3djs.require('lgb.model.ModelBase');
o3djs.require('lgb.model.component.ControlTrigger');
o3djs.require('lgb.model.component.SelectionGroup');
o3djs.require('lgb.model.component.SelectionItem');
o3djs.require('lgb.model.EnvelopeModel');
o3djs.require('lgb.model.ModeModel');
o3djs.require('lgb.model.ZoneModel');
o3djs.require('lgb.model.XmlParser');
o3djs.require('lgb.model.LeftNavModel');

o3djs.require('lgb.view.ViewBase');
o3djs.require('lgb.view.component.Button');
o3djs.require('lgb.view.component.Link');
o3djs.require('lgb.view.component.RadioButtonGroup');

o3djs.require('lgb.view.component.Slider');

o3djs.require('lgb.view.AdminPanel');
o3djs.require('lgb.view.AdminSubpanel');
o3djs.require('lgb.view.EnvelopeView');
o3djs.require('lgb.view.gui');
o3djs.require('lgb.view.LeftNavView');

o3djs.require('lgb.event.EnvelopeEvent');
o3djs.require('lgb.event.Event');
o3djs.require('lgb.event.EventBus');

o3djs.require('lgb.util.Loader');



var lgb = (function(lgb) {

	lgb.controller = lgb.controller || {};
	
	
	/**
	 * @class MVC controller for the building envelope
	 * @extends lgb.controller.ControllerBase
	 */
	lgb.controller.MainController = function() {
		
		lgb.controller.ControllerBase.call(this);

	};
	
	
	lgb.controller.MainController.prototype = {
		
		init: function() {
			
			jQuery(document).ready(this.d(this.onDocumentReady));
			jQuery(window).resize(this.d(this.onWindowResize));
			jQuery(window).unload(this.d(this.onWindowUnload));

		},
		
		onDocumentReady : function(event) {
		
			console.log("kuda version: " + hemi.version);
			console.log("lgb version: " + lgb.version);
			console.log("jQuery version: " + $().jquery);
			
			//lgb.view.gui.init();

			
			
			this.guiController = new lgb.controller.GuiController();
			this.guiController.init();
			
			this.loader = new lgb.util.Loader();
			this.loader.init();
			
			lgb.animation.init();
			
			this.envelopeController = new lgb.controller.EnvelopeController();
			this.envelopeController.init();
			
			this.leftNavController = new lgb.controller.LeftNavController();
			this.leftNavController.init();
			
			this.adminController = new lgb.controller.AdminController();
			this.adminController.init([this.envelopeController.dataModel]);
			
			this.progressbar = new lgb.progressBar.Progressbar();	
			this.progressbar.init("Loading Geometry");
			this.progressbar.show(); 
				
	
			lgb.loader.init();
			lgb.view.gui.setCanvasSize();
			
			lgb.loader.loadModels(  this.d(this.onMeshesLoaded), 
									this.d(this.onProgress),
									this.getFullMeshList() );
		},
		
		getFullMeshList : function(event) {
			
			var list = [];
			list = list.concat(
				this.envelopeController.getMeshList()
				);
			
			return list;
		},
		
		onWindowResize : function(event) {
			lgb.view.gui.resizeNow();
		},
		
		onWindowUnload : function(event) {
			//alert('Handler for .unload() called.');
			if (hemi.core.client) {
				hemi.core.client.cleanup();
			}
		},
		
		onMeshesLoaded : function(event) {
			hemi.world.camera.unsubscribe(this.subscriberCameraStopped, hemi.msg.stop);
	
			this.dispatch(lgb.event.Event.ALL_MESHES_LOADED);
				
			//console.log('onMeshesLoaded');
	
			window.setTimeout('mainController.progressbar.hide();',100);
			hemi.world.camera.enableControl();	// Enable camera mouse control
	
			lgb.utils.preload('icon_exterior_envelope_over.png,icon_lighting_over.png,icon_general_over.png,icon_exterior_envelope_over.png');
			this.setViewPoint();
		
		},
	
		parseXml : function(xml) {
			lgb.view.gui.particleSystemInit(xml);
		},
		
		setViewPoint : function() {
		
			this.makeBoxAtOrigin();
	
			
			var vp = new hemi.view.Viewpoint();		// Create a new Viewpoint
			vp.eye = [0,0,80];					// Set viewpoint eye
			vp.target = [0,0,0];					// Set viewpoint target
			
			this.subscriberCameraStopped = hemi.world.camera.subscribe(
					hemi.msg.stop,
					this,
					'onCameraMoved');
					
			hemi.world.camera.moveToView(vp,40);
		
		},
	
		makeBoxAtOrigin : function() {
			hemi.shape.create({
				shape: 'box',
				color: [0, 1, 0, 0.9],
				h: 1,
				w: 1,
				d: 1
			});
			
		},
		
		onCameraMoved : function(event) {
			
			console.log('onCameraMoved');
			hemi.world.camera.unsubscribe(this.subscriberCameraStopped, hemi.msg.stop);
			lgb.view.gui.showHud();
		
			lgb.utils.preload('icon_exterior_envelope_over.png,icon_lighting_over.png,icon_general_over.png,icon_exterior_envelope_over.png');
		},
		
		onProgress : function(percent) {
			this.progressbar.onProgress(percent);
		}
	
	};
	
	lgb.controller.MainController.inheritsFrom(lgb.controller.ControllerBase);

	return lgb;
	
})(lgb || {});










