o3djs.require('lgb.view.control.Button');
o3djs.require('lgb.view.control.Link');
o3djs.require('lgb.view.control.Slider');
o3djs.require('lgb.view.control.RadioButtonGroup');
o3djs.require('lgb.model.control.SelectionItem');
o3djs.require('lgb.model.control.SelectionGroup');

/**
 * @namespace A module for managing the 2D GUI
 */
var lgb = (function(lgb) {


	/**
	 * @namespace A module for managing the 2D GUI
	 */
	lgb.view = lgb.view || {};


	lgb.view.AdminSubpanel = function( dataModel ) {

		this.name = dataModel.name;
		this.title = dataModel.title;
		this.userActions = dataModel.userActions;
		this.componentControllersAry = [];
		this.init_();
	};
	
	lgb.view.AdminSubpanel.prototype = {
	
		
		init_ : function() {
			
			var len = this.componentDataModels.length;
			for(var x = 0; x < len; x++) {
				var userActions =  this.userActions[x];
				var componentController;
					
				
				if (action instanceof lgb.model.control.SelectionGroup) {
					componentController = new lgb.controller.control.RadioButtonGroupController(action);
					componentController.init();
					//controlView = new lgb.view.control.RadioButtonGroup(action);
				} 
			}

			this.componentControllersAry.push(componentController);
			
			//this.controlViews.push(controlView);
			//actionsHTML+= controlView.getHTML() + '<br />';
		},
				
		
		
		getHTML : function() {
			
			var actionsHTML = '';
			
			var len = this.componentControllersAry.length;
			for(var x = 0; x < len; x++) {
				var componentController =  this.componentControllersAry[x];
				
				
				actionsHTML += componentController.getHTML() + '<br />';

			}
			
			return actionsHTML;
			
		},
		
		bindEvents : function() {
			
		//var delegateClick = $.proxy(this.onLinkClick, this);
		//var delegateChange = $.proxy(this.onLinkChange, this);
			
			var len = this.controlViews.length;
			for(var x = 0; x < len; x++) {
				
				var oneView = this.controlViews[x];
				oneView.bindEvents();
				
/*
				if (action instanceof lgb.model.control.SelectionGroup) {
					controlView = new lgb.view.control.RadioButtonGroup(action);
				} 
*/
				
				//var selector = '#{0}'.format(model.id);
				
/*
				switch(action.type) {
					
					case lgb.model.UserActionType.SPECIFY_INTEGER:
						$(selector).bind( 'change', {action:action.id}, delegateChange );
						break;
					case lgb.model.UserActionType.TRIGGER:
						$(selector).click({action:action.id},delegateClick);
						break;
					case lgb.model.UserActionType.MAKE_CHOICE:
					
						var len2 = action.value.length;

						for (var i=0; i<len2; i++) {

							var id = action.id + '_' + i.toString();
							
							var selector2 = '#{0}'.format(id);
							$(selector2).click({action:action.id}, delegateClick );
						}
						break;
						
					default:
						throw "AdminSubpanel.bindEvents() Unknown action type: " + action.type;
				}
*/
			}
		},
		
		injectHtml : function() {
			
			var actionsHtml = this.makeActionsHTML();
			
			var selector = '#{0}'.format(this.name);
			var group = 'group_{0}'.format(this.name);
			
			el = $('div.box');
			var html = '<div id="{0}" class="panel {1}">\n'.format(this.name, group) +
							'\t<h3>{0}</h3>\n'.format(this.title) +
							'\t<div>\n' + 
								actionsHtml +
							'\t</div>\n' +
						'</div>';
			
			el.append(html);
			
	        $(selector).panel({
	            accordion:group
	        });
			
			this.bindEvents();
			
		},
		
		onLinkChange : function(event) {

			var eventName =  this.id;
			
			var newEvent = jQuery.Event(eventName);
			
			newEvent.action = event.data.action;
			newEvent.value = event.target.value;

			$('body').trigger(newEvent);
		},
		
		onLinkClick : function(event) {
			var eventName =  this.name;
			
			var newEvent = jQuery.Event(eventName);
			newEvent.action = event.data.action;
			newEvent.value = event.target.value;
			
			$('body').trigger(newEvent);
		}
		

	};

	
	return lgb;
	
})(lgb || {});











