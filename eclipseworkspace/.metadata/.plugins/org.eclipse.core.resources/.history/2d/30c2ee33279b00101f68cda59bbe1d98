//o3djs.require('lgb.animation');

o3djs.require('lgb.progressBar');
o3djs.require('lgb.controller.HvacDamperController');
o3djs.require('lgb.controller.EnvelopeController');

/**
 * @namespace MVC controller for the project
 */
var sceneController = (function(sceneController) {


	/**
	 * @namespace MVC controller for the project
	 */
	sceneController = sceneController || {};
	sceneController._NAME = 'sceneController';
	
	sceneController.init = function(controller) {
		
		jQuery(document).ready($.proxy(this.onDocumentReady, this));	
		jQuery(window).resize($.proxy(this.onWindowResize, this));
			
		sceneController.progressbar = null; // the progress bar that we display
	};
	
	sceneController.onDocumentReady = function(event) {
	
		this.adminPanel = new lgb.view.AdminPanel();
	
		//this.hvacDamperController = new lgb.controller.HvacDamperController(this);
		//this.hvacDamperController.init();
		
		this.envelopeController = new lgb.controller.EnvelopeController(this);
		this.envelopeController.init();
		
		
		
		this.adminPanel.showAll([ this.envelopeController.model]);
		this.adminPanel.injectHtml();
					
		//var damperModels = this.hvacDamperController.get3dModels();
		var envelopeModels = this.envelopeController.get3dModels();
		
		var allModels = [];
		allModels = allModels.concat(envelopeModels);
		

		this.progressbar = new lgb.progressBar.Progressbar();	
		this.progressbar.init("Loading Geometry");
		this.progressbar.show(); 
			
		lgb.core.init();
		lgb.loader.init(this);
		lgb.view.gui.setCanvasSize();
		
		var delegateProgress = jQuery.proxy(this.onProgress, this);
		var delegateComplete = jQuery.proxy(this.onModelsLoaded, this);
		
		lgb.loader.loadModels(  delegateComplete, 
								delegateProgress,
								allModels );

	};
	
	 sceneController.onWindowResize = function(event) {
		lgb.view.gui.resizeNow();
	};
		
			
		
	sceneController.onModelsLoaded = function(event) {
	
	
	
	
		console.log('onSceneLoaded');
		
		//window.setTimeout('sceneController.hvacDamperController.resetAnimation()',400);
		
		window.setTimeout('sceneController.progressbar.hide();',100);
		
		//var model = lgb.loader.modelList['damper'];
		//this.centerModelToOrigin(model);
		
		hemi.world.camera.enableControl();	// Enable camera mouse control

		var result = hemi.world.camera.unsubscribe(this.subscriberCameraStopped, hemi.msg.stop);
		lgb.view.gui.showHud();
	
		lgb.utils.preload('icon_exterior_envelope_over.png,icon_lighting_over.png,icon_general_over.png,icon_exterior_envelope_over.png');
		sceneController.setViewPoint();
		
	};
	
	sceneController.parseXml = function(xml) {
		lgb.view.gui.particleSystemInit(xml);
	};
	
	
	
	sceneController.setViewPoint = function() {
		
		sceneController.makeBoxAtOrigin();
		
		//var floor1Model = lgb.loader.modelList['envelope'];
		//sceneController.centerModelToOrigin(floor1Model);
		//var target = floor1Model.getCenterPoint();
		//target[2] -= 3;
		//target[2] = -1 * target[2];
		
		
		var vp = new hemi.view.Viewpoint();		// Create a new Viewpoint
		vp.eye = [0,0,80];					// Set viewpoint eye
		vp.target = [0,0,0];					// Set viewpoint target
		
		this.subscriberCameraStopped = hemi.world.camera.subscribe(
				hemi.msg.stop,
				this,
				'onCameraMoved');
				
		hemi.world.camera.moveToView(vp,40);
		
	};
	
	sceneController.makeBoxAtOrigin = function() {
		var shapeGreenTarget = hemi.shape.create({
			shape: 'box',
			color: [0, 1, 0, 0.9],
			h: 1,
			w: 1,
			d: 1
		});
		
		//shapeGreenTarget.translate(vp.target[0], vp.target[1], vp.target[2]);
	}

/*
	sceneController.setModelRootToOrigin = function() {
		
		var model = lgb.loader.modelList['damper'];
		var min = model.getBoundingBox().minExtent;
		hemi.model.modelRoot.translate(-min[0],-min[1],-min[2]);
		
	};
*/
	sceneController.centerModelToOrigin = function(model) {

		sceneController.showBB(model);
		sceneController.rotate(model);
		
		sceneController.showBB(model);
		sceneController.translate2(model);
						

		
		return;
		

					
	
					
		sceneController.showBB(model);

		
		
		
		//sceneController.showBB(model);
		
		
		bb = model.getBoundingBox();	
		
		xDelta = -1 * bb.minExtent[0];
		yDelta = -1 * bb.minExtent[1];
		zDelta = -1 * bb.minExtent[2];
		model.root.translate(xDelta,yDelta,zDelta);
		
		sceneController.showBB(model);
		
		console.log ('centerModelToOrigin ');
		
	};
	
	
	
	sceneController.rotate = function(model){
		//rotate 90 degrees on the x axis
		var radians = hemi.core.math.degToRad(270);
		model.rotateTransformX(model.root, radians);
	}
	sceneController.translate = function(model){
		var bb = model.root.boundingBox;	
		
/*
		var pointMin = hemi.utils.pointAsWorld (model.root, bb.minExtent);
		var pointMax = hemi.utils.pointAsWorld (model.root, bb.maxExtent);
*/
		var pointMin = bb.minExtent;
		var pointMax = bb.minExtent;
		
		
		var xDelta = -1 * pointMin[0];
		var yDelta = -1 * pointMin[1];
		var zDelta = -1 * pointMin[2];
		model.root.translate(xDelta,yDelta,zDelta);
	}
	
	sceneController.translate2 = function(model){
		var bb = model.root.boundingBox;	
		
/*
		var pointMin = hemi.utils.pointAsWorld (model.root, bb.minExtent);
		var pointMax = hemi.utils.pointAsWorld (model.root, bb.maxExtent);
*/
		var pointMin = bb.minExtent;
		var pointMax = bb.minExtent;
		
		
		var xDelta = -1 * pointMin[0];
		var yDelta = -1 * pointMin[1];
		var zDelta = -1 * pointMin[2];
		
		model.root.translate(xDelta,-zDelta,yDelta);
	}
	
	
	sceneController.showBB = function(model){
		var bb = model.root.boundingBox;
		
		box = [bb.minExtent, bb.maxExtent];
		hemi.curve.showBoxes([box]);
	}
	
	
	sceneController.onCameraMoved = function(event) {
		
		console.log('onCameraMoved');
		var result = hemi.world.camera.unsubscribe(this.subscriberCameraStopped, hemi.msg.stop);
		lgb.view.gui.showHud();
	
		lgb.utils.preload('icon_exterior_envelope_over.png,icon_lighting_over.png,icon_general_over.png,icon_exterior_envelope_over.png');
	};
	
	sceneController.onProgress = function(percent) {
		this.progressbar.onProgress(percent);
	};
		
		
		
	
	return sceneController;
	
})(sceneController || {});



sceneController.init();
