

var lgb = (function(lgb) {

	lgb.controller = lgb.controller || {};
	
	
	/**
	 * @class MVC controller for the building envelope
	 * @extends lgb.controller.ControllerBase
	 */
	lgb.controller.MainControllerNew = function() {
		
		lgb.controller.ControllerBase.call(this);

		//this.dataModel = new lgb.model.EnvelopeModel();
	//	this.view = new lgb.view.EnvelopeView();

	};
	
	
	lgb.controller.MainControllerNew.prototype = {
		
		init: function() {
			
			jQuery(document).ready(this.d(this.onDocumentReady));
			jQuery(window).resize(this.d(this.onWindowResize));
			jQuery(window).unload(this.d(this.onWindowUnload));

			//mainController.progressbar = null; // the progress bar that we display

		},
		
		onDocumentReady : function(event) {
		
			console.log("kuda version: " + hemi.version);
			console.log("lgb version: " + lgb.version);
			console.log("jQuery version: " + $().jquery);
			
			lgb.view.gui.init();
			lgb.animation.init();
			lgb.utils.init();
			
			this.eventBus = $(new lgb.event.EventBus());
		
			this.envelopeController = new lgb.controller.EnvelopeController();
			this.envelopeController.init();
			
			this.leftNavController = new lgb.controller.LeftNavController();
			this.leftNavController.init();
			
			this.adminController = new lgb.controller.AdminController();
			this.adminController.init([this.envelopeController.dataModel]);
			
			var envelopeMeshList = this.envelopeController.getMeshList();
			
			var allMeshes = [];
			allMeshes = allMeshes.concat(envelopeMeshList);
			
			this.progressbar = new lgb.progressBar.Progressbar();	
			this.progressbar.init("Loading Geometry");
			this.progressbar.show(); 
				
	
			lgb.loader.init();
			lgb.view.gui.setCanvasSize();
			
			var delegateProgress = jQuery.proxy(this.onProgress, this);
			var delegateComplete = jQuery.proxy(this.onMeshesLoaded, this);
			
			lgb.loader.loadModels(  delegateComplete, 
									delegateProgress,
									allMeshes );

		},
		
		onWindowResize : function(event) {
			
		},
		
		onWindowUnload : function(event) {
			//alert('Handler for .unload() called.');
			if (hemi.core.client) {
				hemi.core.client.cleanup();
			}
		}
	

	};
	
	lgb.controller.MainControllerNew.inheritsFrom(lgb.controller.ControllerBase);

	return lgb;
	
})(lgb || {});










