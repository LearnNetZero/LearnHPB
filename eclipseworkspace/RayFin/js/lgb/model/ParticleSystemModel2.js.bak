goog.provide('lgb.model.ParticleSystemModel2');

goog.require('lgb.events.DataModelChanged');
goog.require('lgb.model.ModelBase');
goog.require('lgb.utils.XmlParser');




/**
 * @constructor
 * @extends lgb.model.ModelBase
 */
lgb.model.ParticleSystemModel2 = function() {
	

	/**@const */
	this._NAME ='lgb.model.ParticleSystemModel2';
	
	/**@const */
	this._TITLE = 'Particle System';
	
	lgb.model.ModelBase.call(this);
	
	this.xml = null;
	this.xpathResult = null;
	this.currentNode = null;

	this.boxes = {};
	this.colorKeys = {};
	this.scaleKeys = {};
	this.systems = {};
	this.configs = {};
	this.isRunning = true;
	this.showBoxes = true;
	this.showCurves = true;
	this.isEmitting = true;
	

};
goog.inherits(lgb.model.ParticleSystemModel2, lgb.model.ModelBase);

lgb.model.ParticleSystemModel2.prototype.load = function() {
	this.loadScene_();
};


lgb.model.ParticleSystemModel2.prototype.loadScene_= function() {
	var path = lgb.Config.ASSETS_BASE_PATH + 'particle-systems/ps5.js';
	
	/**@type {THREE.SceneLoaderEx} */
	this.loader_ = new THREE.SceneLoaderEx();
	this.loader_.callbackSync = this.d(this.onSceneLoadedSync_);
	this.loader_.load( path );
};


lgb.model.ParticleSystemModel2.prototype.onSceneLoadedSync_ = function(result) {
	/**@type THREE.Scene */
	var scene = result['scene'];
		
	this.masterGroup = new THREE.Object3D();
	
	var i = scene.objects.length;
	while(i--) {
	  	var mesh = scene.objects.shift();
		mesh.bakeTransformsIntoGeometry();
		
		mesh.position = scene.position;
		mesh.rotation = scene.rotation;
		mesh.scale = scene.scale;
		mesh.bakeTransformsIntoGeometry();
		
	  	this.masterGroup.add(mesh);
	};

	//this.masterGroup.position = scene.position;
	//this.masterGroup.rotation = scene.rotation;
	//this.masterGroup.scale = scene.scale;
	
	//var event = new lgb.events.Object3DLoaded(this.masterGroup);
	//this.dispatchLocal(event);
	
	//delete this.loader_;
	this.loadXML_();
};

lgb.model.ParticleSystemModel2.prototype.loadXML_ = function() {
	var url = lgb.Config.XML_BASE_PATH + 'ps2b.xml';
	// var url = lgb.Config.XML_BASE_PATH + 'ps2.xml';

	  jQuery.ajax({
	    type: 'GET',
	    url: url,
	    dataType: 'xml',
	    success: this.d(this.parse)
	  });

};


/**
 * @param {Object} stateObject Contains information about what to change
 */
lgb.model.ParticleSystemModel2.prototype.change = function(stateObject) {
	
	var isAnythingDirty = false;
	var whatIsDirty = {};
	
	if (stateObject.isRunning != null &&
		stateObject.isRunning != this.isRunning) {
		
		this.isRunning = stateObject.isRunning;
		whatIsDirty.isRunning = true;
		isAnythingDirty = true;
	};
	
	if (stateObject.showBoxes != null &&
		stateObject.showBoxes != this.showBoxes) {
		
		this.showBoxes = stateObject.showBoxes;
		whatIsDirty.showBoxes = true;
		isAnythingDirty = true;
	};
	
	
	if (stateObject.showCurves != null &&
		stateObject.showCurves != this.showCurves) {
		
		this.showCurves = stateObject.showCurves;
		whatIsDirty.showCurves = true;
		isAnythingDirty = true;
	};
	
	if (stateObject.isEmitting != null &&
		stateObject.isEmitting != this.isEmitting) {
		
		this.isEmitting = stateObject.isEmitting;
		whatIsDirty.isEmitting = true;
		isAnythingDirty = true;
	};
	
	
	if (isAnythingDirty) {
		this.dispatchLocal(new lgb.events.DataModelChanged(whatIsDirty));
	}

}



lgb.model.ParticleSystemModel2.prototype.parse = function(xml) {

	var parser = new lgb.utils.XmlParser(xml);

	parser.makeRootNode('/particleSystems/@translate');
	this.translate = parser.getFloatArray();

	parser.makeRootNode('/particleSystems/@rotate');
	this.rotate = parser.getFloatArray();



	parser.makeRootNode('/particleSystems/colorKeys/ck');
	while (parser.currentNode) {

		var theID = parser.getId();

		var ck = {	key: parser.getContentAsFloat('key'),
					value: parser.getFloatArray('value')};

		this.colorKeys[theID] = ck;
		parser.next();
    }

	parser.makeRootNode('/particleSystems/scaleKeys/sk');
	while (parser.currentNode) {

		var theID = parser.getId();

		var sk = {
				key: parser.getContentAsFloat('key'),
				value: parser.getFloatArray('value')
		};

		this.scaleKeys[theID] = sk;
		parser.next();
    }

	parser.makeRootNode('/particleSystems/system');
	while (parser.currentNode) {

		var theID = parser.getId();

		var sys = {	id: theID,
					life: parser.getContentAsFloat('life'),
					particleCount: parser.getContentAsFloat('particleCount'),
					boundingBoxIds: parser.getTextArray('boundingBoxIds'),
					shape: parser.getContent('shape'),
					particleSize: parser.getContentAsFloat('particleSize'),
					curve: parser.getContentAsFloat('curve'),
					colorKeyIds: parser.getFloatArray('colorKeyIds'),
					scaleKeyIds: parser.getFloatArray('scaleKeyIds'),
					boxGroup : this.masterGroup
		};


		this.systems[theID] = sys;

		var cfg = this.makeParticleConfig(sys);
		this.configs[theID] = cfg;

		parser.next();
    }

	this.dispatchLocal(new lgb.events.DataModelInitialized());


};


lgb.model.ParticleSystemModel2.prototype.makeParticleConfig = function(sys) {

	var bbAry = this.makeArrayFromIds(sys.boundingBoxIds, this.boxes);
	var ckAry = this.makeArrayFromIds(sys.colorKeyIds, this.colorKeys);
	var skAry = this.makeArrayFromIds(sys.scaleKeyIds, this.scaleKeys);

	var particleSystemConfig = {
		fast: false,
		life: sys.life,
		particleCount: sys.particleCount,
		boxGroup: sys.boxGroup,
		particleSize: sys.particleSize,
		colorKeys: ckAry,
		scaleKeys: skAry
	};

	return particleSystemConfig;
};




lgb.model.ParticleSystemModel2.prototype.makeArrayFromIds = function(idsArray, objs) {
	var ary = new Array();
	var len = idsArray.length;

	for (var i = 0; i < len; i++) {
		var id = idsArray[i];
		var obj = objs[id];

		ary.push(obj);
	}

	return ary;
};
















