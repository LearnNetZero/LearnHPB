/* 
 * Kuda includes a library and editor for authoring interactive 3D content for the web.
 * Copyright (C) 2011 SRI International.
 *
 * This program is free software; you can redistribute it and/or modify it under the terms
 * of the GNU General Public License as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program; 
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, 
 * Boston, MA 02110-1301 USA.
 */

/**
 * This is a simple hello world, showing how to set up a simple world, 
 *		load a model, and set the camera to a viewpoint once the model
 *		has loaded.
 */

	
	jqMock.addShortcut();  
	
	o3djs.require('hemi.core');
	o3djs.require('o3djs.util');


	var unit1 = unit1 || {};
	var testObj = testObj || {};

	
	unit1.start = function(onCompleteCallback) {
		
		jqUnit.module('INITIALIZING'); 
		
		jqUnit.test("makeClients", function(){
			
			jqMock.assertThat(hemi, is.instanceOf(Object));
			jqMock.assertThat(hemi.version, '1.3.2');
			
			jqMock.assertThat(o3djs,is.anything);
			jqMock.assertThat(o3djs.webgl,is.anything);
			
			o3djs.webgl.makeClients(unit1.step_2);
			
		});
		
		jqUnit.stop();
		
	};

	unit1.step_2 = function(clientElements) {
		
		testObj.clientElements = clientElements;
		
		
		jqUnit.start();
		jqUnit.test("init", testObj.init);
		jqUnit.stop();
		
	};
	
	unit1.step_3 = function(clientElements) {
		
		jqUnit.start();
		jqUnit.test("setupScene", testObj.setupScene);
		
		jqUnit.module('MODEL'); 
		jqUnit.test("boundingBox", testObj.boundingBox);


	};

	testObj.boundingBox = function()   {

		var boundingBox = this.model.getBoundingBox();
		
		jqMock.assertThat(boundingBox, is.instanceOf(o3d.BoundingBox));
		
		jqMock.assertThat(boundingBox.minExtent, [-308.3550109863281, -766.7760009765625, -315.0270080566406]);
		jqMock.assertThat(boundingBox.maxExtent, [681.6920166015625, 334.6929931640625, 439.8169860839844]);
		
		jqMock.assertThat( this.model.root.boundingBox.minExtent, [-308.3550109863281, -766.7760009765625, -315.0270080566406]);
		jqMock.assertThat( this.model.root.boundingBox.maxExtent, [681.6920166015625, 334.6929931640625, 439.8169860839844]);
		
		
	
		
	};
	

	
	
	testObj.init = function()   {
		
		var clientElements = testObj.clientElements;
		
		jqMock.assertThat(clientElements , is.instanceOf(Array));
		jqMock.assertThat(clientElements.length , 1);
		
		var htmlCanvasElement = clientElements[0];
		
		//jqMock.assertThat(htmlCanvasElement , is.instanceOf(HTMLCanvasElement));
		jqMock.assertThat(htmlCanvasElement.tagName ,'CANVAS');
		
		hemi.core.init(htmlCanvasElement);
		hemi.view.setBGColor([0.7, 0.8, 1, 1]);
		hemi.loader.loadPath = '../assets/';
		

		this.model = new hemi.model.Model();				// Create a new Model
		jqMock.assertThat(this.model , is.instanceOf(hemi.model.Model));
		
		this.model.setFileName('house_v12/scene.json'); // Set the model file
		
		hemi.world.subscribe(hemi.msg.ready,
			function(msg) {
				unit1.step_3();
			});
		
		hemi.world.ready();   // Indicate that we are ready to start our script
	};

	testObj.setupScene = function()   {
		var vp = new hemi.view.Viewpoint();		// Create a new Viewpoint
		
		jqMock.assertThat(vp , is.instanceOf(hemi.view.Viewpoint));
		jqMock.assertThat(this.model , is.instanceOf(hemi.model.Model));
		
		vp.eye = [-4,507,1435];					// Set viewpoint eye
		vp.target = [5,154,26];					// Set viewpoint target

		/**
		 * Move the camera from it's default position (eye : [0,0,-1],
		 *		target : [0,0,0]} to the new viewpoint, and take 120
		 *		render cycles (~2 seconds) to do so.
		 */
		hemi.world.camera.moveToView(vp,120);
		hemi.world.camera.enableControl();	// Enable camera mouse control
	};


	

