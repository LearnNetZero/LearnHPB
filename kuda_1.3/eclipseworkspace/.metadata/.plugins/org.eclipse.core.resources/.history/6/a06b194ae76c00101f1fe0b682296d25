


		var progressbar = new Progressbar();
		var hasReached100 = false;
		var hascompleted = false;
		

		setupHandlers();
		
		function setupHandlers() {
			jQuery(document).ready(onDocumentReady);	
			jQuery(window).resize(this.onWindowResize);
		}
		
		function onDocumentReady(event) {
			
			progressbar.init("Loading Geometry");
			progressbar.show();
				
			var left = window.innerWidth / 2 + 100;
			
			var backg = document.getElementById("progressbarBackground");
			backg.style.left=left + 'px';
				

			lgb.core.init();
			lgb.gui.setCanvasSize();
			lgb.loader.loadScene(onSceneLoaded);
		}
			
		function onWindowResize(event) {
			lgb.gui.resizeNow();
		}
		
			
			/*
		function returnKey(evt)
		{
			var evt  = (evt) ? evt : ((event) ? event : null);
		 
			if (evt.keyCode == 13) 
			{
				var vd = new hemi.view.ViewData();
				vd.eye = [16.6,25.3,-23.6];
				
				hemi.world.camera.moveToView(vd,40);
				
			}
		}
		*/
		
		function onSceneLoaded() {

			console.log('onSceneLoaded');
			window.setTimeout('progressbar.hide();',200);
			
			this.opacity = lgb.animation.createAlphaParam('Mesh_033');
			

			var vp = new hemi.view.Viewpoint();		// Create a new Viewpoint
			vp.eye = [-56,61,39];					// Set viewpoint eye
			vp.target = [0,10,0];					// Set viewpoint target

			
			this.subscriberCameraStopped = hemi.world.camera.subscribe(
					hemi.msg.stop,
					this,
					'onCameraMoved');
					
					
			hemi.model.modelRoot.rotateX(4.72);
			hemi.world.camera.enableControl();	// Enable camera mouse control
			hemi.world.camera.moveToView(vp,40);
			
		}
		
		
		function onCameraMoved(msg) {
			console.log('onCameraMoved');
			var result = hemi.world.camera.unsubscribe(this.subscriberCameraStopped, hemi.msg.stop);
			lgb.gui.showHud();
	
			lgb.utils.preload('icon_exterior_envelope_over.png,icon_lighting_over.png,icon_general_over.png,icon_exterior_envelope_over.png');
		}
	
		function onProgress(arg) {
			progressbar.onProgress(arg.data.percent);
		}
		
		

	
	
	
		
