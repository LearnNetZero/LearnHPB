
o3djs.require('lgb.model.XmlParser');

/**
 * @namespace A module for managing the 2D GUI
 */
var lgb = (function(lgb) {


	/**
	 * @namespace MVC controller 
	 */
	lgb.model = lgb.model || {};
	
	lgb.model.ParticleSystem = function(xml){

		this.xml = xml;
		this.xpathResult = null;
		this.currentNode = null;
	};
	

	lgb.model.ParticleSystem.prototype = {
		
		getConfigs: function(xml) {


			
			var parser = new lgb.model.XmlParser(xml);
			parser.makeRootNode('/particleSystems/boundingBoxes/box');
			
			var boxes = {};
            
			while (parser.currentNode) {
				var theID = parser.getId();
				var ary = parser.getFloatArray();

				var point1 = ary.slice(0,3);
				var point2 = ary.slice(3,6);

				var box = [point1,point2];
				boxes[theID] = box;

				parser.next();
            }
			
			parser.makeRootNode('/particleSystems/colorKeys/ck');
			var colorKeys = {};
			
			while (parser.currentNode) {
				
				var theID = parser.getId();
	
				var ck = {	key: parser.getContentAsFloat("key"),
							value: parser.getFloatArray("value")};
				
				colorKeys[theID] = ck;
				parser.next();
            }
			
			parser.makeRootNode('/particleSystems/scaleKeys/sk');
			var scaleKeys = {};
			
			while (parser.currentNode) {
				
				var theID = parser.getId();
	
				var sk = {
						key: parser.getContentAsFloat("key"),
						value: parser.getFloatArray("value")
				};
				
				scaleKeys[theID] = sk;
				parser.next();
            }
			
			
			parser.makeRootNode('/particleSystems/system');
			var systems = {};
			var configs = {};
			
			while (parser.currentNode) {
				
				var theID = parser.getId();
				
				var sys = {	id: theID, 
							rate: parser.getContentAsFloat("rate"),
							life: parser.getContentAsFloat("life"),
							boundingBoxIds: parser.getTextArray("boundingBoxIds"),
							shape: parser.getContent("shape"),
							curve: parser.getContentAsFloat("curve"),
							colorKeyIds: parser.getFloatArray("colorKeyIds"),
							scaleKeyIds: parser.getFloatArray("scaleKeyIds")
				};
				
				
				systems[theID] = sys;
				
				var cfg = this.makeParticleConfig(sys, boxes, colorKeys, scaleKeys);
				configs[theID] = cfg;
				
				parser.next();
            }
			

			var floor1Model = lgb.loader.modelList['floor1'];
			var bb = floor1Model.getBoundingBox();
			
			var width = bb.maxExtent[0] - bb.minExtent[0]; //long side
			var depth = bb.maxExtent[1] - bb.minExtent[1]; //narrow side
			var height = bb.maxExtent[2] - bb.minExtent[2]; //floor height
			depth -= 6;
			
			var centerZ = depth /2;
			var centerY = height /2;
			var centerX = width /2;
			
			
			//left-right negative is right, up/down positive is up
			var target = [centerX+1.2, centerY-1.0, -centerZ];
			
			var shape2 = hemi.shape.create({
				shape: 'box',
				color: [1,1,0,0.3],
				h:1,w:1,d:1});
				
				shape2.translate(target[0],target[1],target[2]);
				
				//hemi.core.client.root.translate(20,0,0);
				
			var model = new hemi.model.Model();
			//model.translate(20,0,0);
			
			/* Create the particle system with the above config, 
			 * and make the root transform its parent.
			 */
			lgb.view.gui.particleSystem = new hemi.curve.ParticleSystem(
				shape2, 
				configs['1']);
			
			lgb.view.gui.exitSystem = new hemi.curve.ParticleSystem(
				shape2, 
				configs['2']);	
	
			lgb.view.gui.showBoxes = false;
		}

	};
	


	return lgb;
	
})(lgb || {});










