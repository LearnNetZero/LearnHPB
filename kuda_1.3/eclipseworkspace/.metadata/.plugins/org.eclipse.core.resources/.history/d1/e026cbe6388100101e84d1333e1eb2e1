/* 
 * Kuda includes a library and editor for authoring interactive 3D content for the web.
 * Copyright (C) 2011 SRI International.
 *
 * This program is free software; you can redistribute it and/or modify it under the terms
 * of the GNU General Public License as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program; 
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, 
 * Boston, MA 02110-1301 USA.
 */

/**
 * This is a simple hello world, showing how to set up a simple world, 
 *		load a model, and set the camera to a viewpoint once the model
 *		has loaded.
 */

	o3djs.require('hemi.core');
	o3djs.require('o3djs.util');
	
	jqMock.addShortcut();  

	var unit1 = unit1 || {};
	var unitTest1 = unitTest1 || {};

	
	unit1.start = function(onCompleteCallback) {
		
		this.onCompleteCallback = onCompleteCallback;
		jqUnit.module('UNIT 1'); 
		
		jqUnit.expect(1);
		jqUnit.test("loadModel", unitTest1.loadModel);
		jqUnit.stop();
		
	};

	unit1.step_2 = function() {
		
	
		jqUnit.start();
		jqUnit.expect(5);
		jqUnit.test("init", unitTest1.init);
		jqUnit.stop();
		
	};
	
	unit1.step_3 = function(clientElements) {
		
		var result = hemi.world.camera.unsubscribe(unitTest1.readySubscription, hemi.msg.ready);
		
		jqUnit.start();
		jqUnit.expect(2);
		jqUnit.test("setupScene", unitTest1.setupScene);

	};
	
	unit1.step_4 = function(clientElements) {
		
		var result = hemi.world.camera.unsubscribe(unitTest1.cameraStopSubscription, hemi.msg.stop);
		
		jqUnit.expect(5);
		jqUnit.test("boundingBox", unitTest1.boundingBox);
		
		unit1.cleanup();


	};
	
	unit1.cleanup = function() {
		unitTest1.model.cleanup();
		unit1.onCompleteCallback.call();
		
	};

	unitTest1.boundingBox = function()   {

		var boundingBox = unitTest1.model.getBoundingBox();
		
		jqMock.assertThat(boundingBox, is.instanceOf(o3d.BoundingBox));
		
		jqMock.assertThat(boundingBox.minExtent, [-308.3550109863281, -766.7760009765625, -315.0270080566406]);
		jqMock.assertThat(boundingBox.maxExtent, [681.6920166015625, 334.6929931640625, 439.8169860839844]);
		
		jqMock.assertThat( unitTest1.model.root.boundingBox.minExtent, [-308.3550109863281, -766.7760009765625, -315.0270080566406]);
		jqMock.assertThat( unitTest1.model.root.boundingBox.maxExtent, [681.6920166015625, 334.6929931640625, 439.8169860839844]);
		
		
	
		
	};
	

	
	
	unitTest1.loadModel = function()   {
		
		unitTest1.model = new hemi.model.Model();				// Create a new Model
		jqMock.assertThat(unitTest1.model , is.instanceOf(hemi.model.Model));
		
		unitTest1.model.setFileName('house_v12/scene.json'); // Set the model file
		
		unitTest1.readySubscription = hemi.world.subscribe(hemi.msg.ready,
			function(msg) {
				unit1.step_2();
			});
		
		hemi.world.ready();   // Indicate that we are ready to start our script

	};
	

	unitTest1.setupScene = function()   {
		
		
		var x = unitTest1.readyListener;
		
		var vp = new hemi.view.Viewpoint();		// Create a new Viewpoint
		
		jqMock.assertThat(vp , is.instanceOf(hemi.view.Viewpoint));
		jqMock.assertThat(unitTest1.model , is.instanceOf(hemi.model.Model));
		
		vp.eye = [-4,507,1435];					// Set viewpoint eye
		vp.target = [5,154,26];					// Set viewpoint target


		unitTest1.cameraStopSubscription = hemi.world.camera.subscribe(
				hemi.msg.stop,
				unit1,
				'step_4');
		
		hemi.world.camera.moveToView(vp,120);
		hemi.world.camera.enableControl();	// Enable camera mouse control
	};


	

